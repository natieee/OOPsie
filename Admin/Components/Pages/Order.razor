@page "/order"
@layout Admin.Components.Layout.MainLayout

<div class="page-container">
    <h2 class="page-title">üì¶ Orders</h2>

    <!-- Search and Filter Section -->
    <div class="filter-section">
        <button class="search-btn" @onclick="ToggleSearchPanel">
            üîç Search & Filter
        </button>
        
        @if (showSearchPanel)
        {
            <div class="search-panel">
                <div class="search-row">
                    <div class="search-field">
                        <label>Customer Name:</label>
                        <input type="text" @bind="searchName" @bind:event="oninput" 
                               placeholder="Enter customer name..." />
                    </div>
                    <div class="search-field">
                        <label>Date:</label>
                        <input type="date" @bind="searchDate" @bind:format="yyyy-MM-dd" />
                    </div>
                    <div class="search-field">
                        <label>Payment Status:</label>
                        <select @bind="searchPaymentStatus">
                            <option value="">All</option>
                            <option value="Pending">Pending</option>
                            <option value="Successful">Successful</option>
                            <option value="Failed">Failed</option>
                            <option value="Refunded">Refunded</option>
                        </select>
                    </div>
                </div>
                <div class="search-row">
                    <div class="search-field">
                        <label>
                            <input type="checkbox" @bind="groupByDay" />
                            Group by Day
                        </label>
                    </div>
                    <div class="search-actions">
                        <button class="apply-btn" @onclick="ApplyFilters">Apply</button>
                        <button class="clear-btn" @onclick="ClearFilters">Clear</button>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Orders Table -->
    @if (groupByDay && filteredOrders.Any())
    {
        @foreach (var dayGroup in filteredOrders.GroupBy(o => o.OrderDate.Date).OrderBy(g => g.Key))
        {
            <div class="day-group">
                <h3 class="day-header">üìÖ @dayGroup.Key.ToString("MMMM dd, yyyy")</h3>
                <table class="order-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Address</th>
                            <th>Time</th>
                            <th>Order Status</th>
                            <th>Payment Status</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in dayGroup.OrderBy(o => o.OrderDate))
                        {
                            <tr>
                                <td>@order.Id</td>
                                <td>@order.Customer</td>
                                <td>@order.Address</td>
                                <td>@order.OrderDate.ToString("hh:mm tt")</td>
                                <td>
                                    <select value="@order.Status" @onchange="@(e => OnOrderStatusChange(order, e))" class="status-select @GetOrderStatusClass(order.Status)">
                                        <option value="Pending">Pending</option>
                                        <option value="Picked Up">Picked Up</option>
                                        <option value="Delivered">Delivered</option>
                                        <option value="Cancelled">Cancelled</option>
                                    </select>
                                </td>
                                <td>
                                    <select value="@order.PaymentStatus" @onchange="@(e => OnPaymentStatusChange(order, e))" class="payment-status-select @GetPaymentStatusClass(order.PaymentStatus)">
                                        <option value="Pending">Pending</option>
                                        <option value="Successful">Successful</option>
                                        <option value="Failed">Failed</option>
                                        <option value="Refunded">Refunded</option>
                                    </select>
                                </td>
                                <td>‚Ç±@order.Amount.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <table class="order-table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Address</th>
                    <th>Date & Time</th>
                    <th>Order Status</th>
                    <th>Payment Status</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in filteredOrders)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.Customer</td>
                        <td>@order.Address</td>
                        <td>@order.OrderDate.ToString("MMM dd, yyyy hh:mm tt")</td>
                        <td>
                            <select value="@order.Status" @onchange="@(e => OnOrderStatusChange(order, e))" class="status-select @GetOrderStatusClass(order.Status)">
                                <option value="Pending">Pending</option>
                                <option value="Picked Up">Picked Up</option>
                                <option value="Delivered">Delivered</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                        </td>
                        <td>
                            <select value="@order.PaymentStatus" @onchange="@(e => OnPaymentStatusChange(order, e))" class="payment-status-select @GetPaymentStatusClass(order.PaymentStatus)">
                                <option value="Pending">Pending</option>
                                <option value="Successful">Successful</option>
                                <option value="Failed">Failed</option>
                                <option value="Refunded">Refunded</option>
                            </select>
                        </td>
                        <td>‚Ç±@order.Amount.ToString("N2")</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (!filteredOrders.Any())
    {
        <div class="no-orders">
            No orders found matching your search criteria.
        </div>
    }
</div>

@code {
    private List<OrderModel> orders = new();
    private List<OrderModel> filteredOrders = new();
    private bool showSearchPanel = false;
    private string searchName = "";
    private DateTime? searchDate;
    private string searchPaymentStatus = "";
    private bool groupByDay = false;

    protected override void OnInitialized()
    {
        // Sample data with dates, payment status, amounts, and addresses
        orders = new List<OrderModel>
        {
            new() { Id = "ORD-006", Customer = "Anna Cruz", Address = "123 Main St, Manila", Status = "Pending", 
                   PaymentStatus = "Pending", Amount = 125.50m,
                   OrderDate = DateTime.Today.AddHours(10).AddMinutes(30) },
            new() { Id = "ORD-005", Customer = "Marco Diaz", Address = "456 Oak Ave, Quezon City", Status = "Picked Up", 
                   PaymentStatus = "Successful", Amount = 89.99m,
                   OrderDate = DateTime.Today.AddHours(14).AddMinutes(15) },
            new() { Id = "ORD-004", Customer = "Jessa Flores", Address = "789 Pine St, Makati", Status = "Delivered", 
                   PaymentStatus = "Successful", Amount = 215.75m,
                   OrderDate = DateTime.Today.AddDays(-1).AddHours(9).AddMinutes(45) },
            new() { Id = "ORD-003", Customer = "Carlos Reyes", Address = "321 Elm St, Taguig", Status = "Pending", 
                   PaymentStatus = "Failed", Amount = 45.25m,
                   OrderDate = DateTime.Today.AddDays(-1).AddHours(16).AddMinutes(20) },
            new() { Id = "ORD-002", Customer = "Maria Santos", Address = "654 Maple Dr, Pasig", Status = "Picked Up", 
                   PaymentStatus = "Refunded", Amount = 150.00m,
                   OrderDate = DateTime.Today.AddHours(11).AddMinutes(0) },
            new() { Id = "ORD-001", Customer = "John Smith", Address = "987 Cedar Ln, Mandaluyong", Status = "Delivered", 
                   PaymentStatus = "Successful", Amount = 299.99m,
                   OrderDate = DateTime.Today.AddDays(-2).AddHours(13).AddMinutes(30) }
        };
        
        filteredOrders = orders;
    }

    private void ToggleSearchPanel()
    {
        showSearchPanel = !showSearchPanel;
    }

    private void ApplyFilters()
    {
        filteredOrders = orders.Where(order =>
            (string.IsNullOrEmpty(searchName) || 
             order.Customer.Contains(searchName, StringComparison.OrdinalIgnoreCase)) &&
            (!searchDate.HasValue || 
             order.OrderDate.Date == searchDate.Value.Date) &&
            (string.IsNullOrEmpty(searchPaymentStatus) || 
             order.PaymentStatus == searchPaymentStatus)
        ).ToList();
        
        StateHasChanged(); // Refresh UI after filtering
    }

    private void ClearFilters()
    {
        searchName = "";
        searchDate = null;
        searchPaymentStatus = "";
        groupByDay = false;
        filteredOrders = orders;
        StateHasChanged(); // Refresh UI after clearing filters
    }

    private void OnOrderStatusChange(OrderModel order, ChangeEventArgs e)
    {
        order.Status = e.Value?.ToString() ?? "Pending";
        StateHasChanged(); // Force UI refresh to update colors
        
        Console.WriteLine($"Order {order.Id} status changed to: {order.Status}");
    }

    private void OnPaymentStatusChange(OrderModel order, ChangeEventArgs e)
    {
        order.PaymentStatus = e.Value?.ToString() ?? "Pending";
        StateHasChanged(); // Force UI refresh to update colors
        
        Console.WriteLine($"Order {order.Id} payment status changed to: {order.PaymentStatus}");
    }

    private string GetOrderStatusClass(string orderStatus)
    {
        return orderStatus?.ToLower() switch
        {
            "pending" => "order-pending",
            "picked up" => "order-picked-up",
            "delivered" => "order-delivered",
            "cancelled" => "order-cancelled",
            _ => "order-pending"
        };
    }

    private string GetPaymentStatusClass(string paymentStatus)
    {
        return paymentStatus?.ToLower() switch
        {
            "pending" => "payment-pending",
            "successful" => "payment-successful",
            "failed" => "payment-failed",
            "refunded" => "payment-refunded",
            _ => "payment-pending"
        };
    }

    public class OrderModel
    {
        public string Id { get; set; } = string.Empty;
        public string Customer { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string PaymentStatus { get; set; } = string.Empty;
        public decimal Amount { get; set; }  // Use decimal for currency
        public DateTime OrderDate { get; set; }  // Changed from DateTime? to DateTime
    }
}

<style>
/* Your existing CSS remains the same */
.page-container {
    padding: 2rem;
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    height: 100%;
    margin: 0;
    overflow-y: auto;
    background: rgba(255, 255, 255, 0.04);
    backdrop-filter: blur(10px);
    background-image: url('/images/water-bg.jpg');
    background-size: cover;
    background-position: center;
}

.page-title {
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
}

.filter-section {
    width: 90%;
    max-width: 1000px;
    margin-bottom: 1.5rem;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

.search-btn {
    background: #007acc;
    color: white;
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
    margin-bottom: 1rem;
}

.search-btn:hover {
    background: #005a9e;
}

.search-panel {
    background: rgba(255, 255, 255, 0.95);
    padding: 1.5rem;
    border-radius: 12px;
    width: 100%;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    margin-bottom: 1rem;
}

.search-row {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
}

.search-field {
    display: flex;
    flex-direction: column;
    flex: 1;
    min-width: 200px;
}

.search-field label {
    color: #002f5f;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.search-field input, .search-field select {
    padding: 0.6rem;
    border: 2px solid #e3f3ff;
    border-radius: 6px;
    background: white;
    color: #003366;
}

.search-actions {
    display: flex;
    gap: 0.5rem;
    align-items: flex-end;
}

.apply-btn, .clear-btn {
    padding: 0.6rem 1.2rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: bold;
}

.apply-btn {
    background: #28a745;
    color: white;
}

.apply-btn:hover {
    background: #218838;
}

.clear-btn {
    background: #dc3545;
    color: white;
}

.clear-btn:hover {
    background: #c82333;
}

.order-table {
    width: 90%;
    max-width: 1200px;
    border-collapse: collapse;
    text-align: center;
    background: rgba(255,255,255,0.85);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    margin: 0 0 2rem 0;
}

.order-table th, .order-table td {
    padding: 1rem;
    color: #002f5f;
}

.order-table th {
    background: #007acc;
    color: white;
    font-weight: bold;
}

/* Order Status Styles */
.status-select {
    border: none;
    padding: 0.4rem 0.8rem;
    border-radius: 8px;
    font-weight: bold;
    color: white;
    cursor: pointer;
    min-width: 120px;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.7rem top 50%;
    background-size: 1rem;
}

.order-pending {
    background: #ff9800 !important; /* Orange/Yellow */
}

.order-picked-up {
    background: #9e9e9e !important; /* Gray */
}

.order-delivered {
    background: #4caf50 !important; /* Green */
}

.order-cancelled {
    background: #f44336 !important; /* Red */
}

/* Payment Status Styles */
.payment-status-select {
    border: none;
    padding: 0.4rem 0.8rem;
    border-radius: 8px;
    font-weight: bold;
    color: white;
    cursor: pointer;
    min-width: 120px;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.7rem top 50%;
    background-size: 1rem;
}

.payment-pending {
    background: #ff9800 !important; /* Orange/Yellow */
}

.payment-successful {
    background: #4caf50 !important; /* Green */
}

.payment-failed {
    background: #f44336 !important; /* Red */
}

.payment-refunded {
    background: #9e9e9e !important; /* Gray */
}

/* Remove transitions and animations */
.status-select, .payment-status-select,
.search-btn, .apply-btn, .clear-btn {
    transition: none !important;
}

.day-group {
    width: 90%;
    max-width: 1200px;
    margin-bottom: 2rem;
}

.day-header {
    color: white;
    background: rgba(0, 122, 204, 0.8);
    padding: 0.8rem 1.5rem;
    border-radius: 8px;
    margin-bottom: 0.5rem;
    font-size: 1.2rem;
}

.no-orders {
    color: white;
    background: rgba(255, 255, 255, 0.2);
    padding: 2rem;
    border-radius: 12px;
    text-align: center;
    font-size: 1.1rem;
    margin-top: 2rem;
}

/* Responsive design */
@@media (max-width: 768px) {
    .search-row {
        flex-direction: column;
    }
    
    .search-field {
        min-width: 100%;
    }
    
    .order-table {
        font-size: 0.8rem;
    }
    
    .order-table th, .order-table td {
        padding: 0.5rem;
    }
    
    .status-select, .payment-status-select {
        min-width: 100px;
        font-size: 0.7rem;
    }
}
</style>